


Maquina alvo = Linux ubuntu 3.2.0-23-generic #36-Ubuntu SMP Tue Apr 10 20:39:51 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux

sudo docker start -i docker_gcc23

# gcc --version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609

Para criar um container Docker com Ubuntu 16.04 LTS e glibc 2.23.

1. Instalar o Docker (se não estiver instalado)
bash
Copy code
sudo apt update
sudo apt install docker.io
2. Iniciar o serviço Docker
bash
Copy code
sudo systemctl start docker
sudo systemctl enable docker
3. Baixar a imagem do Ubuntu 16.04 LTS
bash
Copy code
sudo docker pull ubuntu:16.04
4. Criar o container docker_gcc23 com Ubuntu 16.04 LTS
bash
Copy code
sudo docker run -it --name docker_gcc23 ubuntu:16.04
Isso vai abrir o terminal dentro do container.

5. Instalar o GCC e outras dependências no container
Dentro do container, execute os seguintes comandos:

bash
Copy code
apt update
apt install build-essential
6. Sair do container
bash
Copy code
exit
7. Para usar o container no futuro
Sempre que precisar compilar, você pode executar o container com o seguinte comando:

bash
Copy code
sudo docker start -i docker_gcc23
Isso vai iniciar o container e você estará no terminal do container com glibc 2.23.

8. Compilar dentro do container
Dentro do container, você pode usar o comando gcc normalmente para compilar seu código:

bash
Copy code
gcc -o ar ar.c
Agora você tem um ambiente Docker configurado com o Ubuntu 16.04 LTS e glibc 2.23 para compilar seus arquivos com a versão correta da glibc.


Para transferir seu arquivo para o container Docker, você pode usar os seguintes métodos:

1. Usando o comando docker cp (para copiar arquivos de fora para o container)
Para copiar um arquivo do seu sistema local para o container, use o comando docker cp. Suponha que você tenha o arquivo ar.c em /home/kali/ar.c e queira movê-lo para o diretório /root dentro do container.

bash
Copy code
sudo docker cp /home/kali/ar.c docker_gcc23:/root/ar.c
Isso vai copiar o arquivo ar.c para a pasta /root no container docker_gcc23.

2. Usando o Docker com montagem de volumes (para acessar arquivos diretamente)
Você também pode montar um diretório do seu sistema local dentro do container, para que ele tenha acesso direto aos arquivos. Por exemplo, se você deseja compartilhar o diretório /home/kali/ctf_files com o diretório /root/ctf_files no container, execute:

bash
Copy code
sudo docker run -it --name docker_gcc23 -v /home/kali/ctf_files:/root/ctf_files ubuntu:16.04
Agora, dentro do container, você pode acessar os arquivos na pasta /root/ctf_files como se estivessem localmente no container. Quando você adicionar ou modificar arquivos em /home/kali/ctf_files, as mudanças estarão automaticamente refletidas dentro do container.

3. Usando o docker exec para copiar durante o uso
Se o container já estiver em execução, você pode usar o comando docker exec para mover arquivos. Por exemplo, para mover o arquivo ar.c para o diretório /root do container em execução:

bash
Copy code
sudo docker exec -it docker_gcc23 bash -c "cp /home/kali/ar.c /root/ar.c"
Agora o arquivo ar.c estará no diretório /root dentro do seu container.


no kali 

docker cp /home/kali/33589.c docker_gcc23:/root/33589.c
Successfully copied 5.12kB to docker_gcc23:/root/33589.c

docker cp docker_gcc23:/root/33589 /home/kali/33589

Successfully copied 15.4kB to /home/kali/33589


no dockert


sudo docker start -i docker_gcc23

root@e4c8a938204a:/# gcc --version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

root@e4c8a938204a:/# gcc /root/33589.c -o /root/33589
root@e4c8a938204a:/# docker cp docker_gcc23:/root/33589 /home/kali/33589
bash: docker: command not found
root@e4c8a938204a:/# 


